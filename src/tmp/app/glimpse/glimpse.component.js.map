{"version":3,"sources":["app/glimpse/glimpse.component.ts"],"names":[],"mappings":"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","file":"glimpse.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { DashboardEventService } from '../dashboard/dashboard-event.service';\r\nimport { DataService } from '../data/index';\r\nimport { LoggerService } from '../shared/index';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'as-glimpse',\r\n    templateUrl: 'glimpse.html'\r\n})\r\nexport class GlimpseComponent implements OnInit {\r\n    public barChartOptions: any = {\r\n        scaleShowVerticalLines: false,\r\n        responsive: true,\r\n        scales: {\r\n            yAxes: [{\r\n                display: true,\r\n                ticks: {\r\n                    suggestedMin: 0,    // minimum will be 0, unless there is a lower value.\r\n                    // OR //\r\n                    beginAtZero: true,   // minimum value will be 0.\r\n                    suggestedMax: 100,\r\n                    max: 150\r\n                }\r\n            }]\r\n        }\r\n    };\r\n\r\n    public isDataAvailable: boolean = false;\r\n    public barChartLabels: string[] = [];\r\n    public barChartType: string = 'bar';\r\n    public barChartLegend: boolean = true;\r\n    public barChartData: any[];\r\n\r\n    constructor(\r\n        private dataService: DataService,\r\n        private loggerService: LoggerService,\r\n        private dashboarEventService: DashboardEventService) {\r\n        dashboarEventService.componentUpdated({ Event: 'loaded', Name: 'Glimpse' });\r\n    }\r\n\r\n    ngOnInit() {\r\n        let document: any = {\r\n            'aggregate': [\r\n                { '$sort': { 'CreateTime': -1 } },\r\n                {\r\n                    '$project': {\r\n                        '_id': 1,\r\n                        'HRID': 1,\r\n                        'CreateTime': 1,\r\n                        'Order.Type': 1,\r\n                        'Order.Variant': 1,\r\n                        'User.Type': 1,\r\n                        'User.UserName': 1,\r\n                        'h': {\r\n                            '$hour': '$CreateTime'\r\n                        },\r\n                        'm': {\r\n                            '$minute': '$CreateTime'\r\n                        },\r\n                        's': {\r\n                            '$second': '$CreateTime'\r\n                        },\r\n                        'ml': {\r\n                            '$millisecond': '$CreateTime'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    '$project': {\r\n                        '_id': 1,\r\n                        'HRID': 1,\r\n                        'Order.Type': 1,\r\n                        'Order.Variant': 1,\r\n                        'User.Type': 1,\r\n                        'User.UserName': 1,\r\n                        'CreateTime': {\r\n                            '$subtract': [\r\n                                '$CreateTime',\r\n                                {\r\n                                    '$add': [\r\n                                        '$ml',\r\n                                        {\r\n                                            '$multiply': [\r\n                                                '$s',\r\n                                                1000\r\n                                            ]\r\n                                        },\r\n                                        {\r\n                                            '$multiply': [\r\n                                                '$m',\r\n                                                60,\r\n                                                1000\r\n                                            ]\r\n                                        },\r\n                                        {\r\n                                            '$multiply': [\r\n                                                '$h',\r\n                                                60,\r\n                                                60,\r\n                                                1000\r\n                                            ]\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    '$group': {\r\n                        '_id': {\r\n                            'CreateDate': '$CreateTime'\r\n                        },\r\n                        'count': {\r\n                            '$sum': 1\r\n                        },\r\n                        'jobs': {\r\n                            '$push': '$HRID'\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n\r\n        this.dataService.executeAggregation('Jobs', document)\r\n            .subscribe(result => {\r\n                let jobCountArray: any[] = [];\r\n                if (result) {\r\n                    // Need to parse this crap here\r\n                    let res: any[] = result;\r\n                    for (let entry of res) {\r\n                        this.barChartLabels.push(new Date(entry._id.CreateDate.$date).toDateString());\r\n                        jobCountArray.push(entry.count);\r\n                    }\r\n                }\r\n                this.barChartData = [{data: jobCountArray, label: 'Orders'}];\r\n                this.isDataAvailable = true;\r\n            },\r\n            error => { this.loggerService.error(error); });\r\n    }\r\n}\r\n"]}