{"version":3,"sources":["app/data/data.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAwD;AACxD,8CAA6C;AAC7C,qCAAmC;AACnC,iCAA+B;AAC/B,mCAAiC;AACjC,yCAA2D;AAG3D,IAAa,WAAW;IACpB;;OAEG;IACH,qBACY,IAAU,EACV,aAA4B;QAD5B,SAAI,GAAJ,IAAI,CAAM;QACV,kBAAa,GAAb,aAAa,CAAe;IAAI,CAAC;IAE7C,wCAAkB,GAAlB,UAAmB,cAAsB,EAAE,iBAAsB;QAAjE,iBAgBC;QAfG,IAAI,MAAM,GAAG,iBAAS,CAAC,GAAG,CAAC,QAAQ,GAAG,cAAc,GAAG,IAAI,CAAC;QAE5D,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAEnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,CAAC;aAC3C,GAAG,CAAC,UAAC,GAAa;YACf,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;gBACxC,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,CAAC,KAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,KAAe;YACnB,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,yCAAmB,GAA3B,UAA4B,GAAa;QACrC,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACtB,CAAC;IAEO,mCAAa,GAArB,UAAsB,KAAqB;QACvC,IAAI,MAAc,CAAC;QACnB,EAAE,CAAC,CAAC,KAAK,YAAY,eAAQ,CAAC,CAAC,CAAC;YAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,GAAM,KAAK,CAAC,MAAM,YAAM,KAAK,CAAC,UAAU,IAAI,EAAE,UAAI,GAAK,CAAC;QAClE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC9D,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACjC,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACL,kBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,WAAW;IADvB,iBAAU,EAAE;qCAMS,WAAI;QACK,qBAAa;GAN/B,WAAW,CA2CvB;AA3CY,kCAAW","file":"data.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\nimport { CONSTANTS, LoggerService } from '../shared/index';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n    /**\r\n     * Generic service towards DataCat\r\n     */\r\n    constructor(\r\n        private http: Http,\r\n        private loggerService: LoggerService) { }\r\n\r\n    executeAggregation(collectionName: string, aggregateDocument: any) {\r\n        let aggUrl = CONSTANTS.ENV.API_BASE + collectionName + '/a';\r\n\r\n        let headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        return this.http.post(aggUrl, aggregateDocument)\r\n            .map((res: Response) => {\r\n                if (res.status < 200 || res.status >= 300) {\r\n                    throw new Error('Response status: ' + res.status);\r\n                }\r\n                return this._extractAndSaveData(res);\r\n            })\r\n            .catch((error: Response) => {\r\n                return this._extractError(error);\r\n            });\r\n    }\r\n\r\n    private _extractAndSaveData(res: Response) {\r\n        let body = res.json();\r\n        return body || {};\r\n    }\r\n\r\n    private _extractError(error: Response | any) {\r\n        let errMsg: string;\r\n        if (error instanceof Response) {\r\n            const body = error.json() || '';\r\n            const err = body.error || JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        this.loggerService.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\r\n}\r\n"]}